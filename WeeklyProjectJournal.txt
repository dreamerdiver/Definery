Definery - Dictionary Entry Application
Enterprise Java - Individual Project
Weekly Journal


Week 3: Project Conceptualization/ Frameworking

    So this is a project that I've been looking to start for some time, and this
course gave me the necessary kick in the pants if you will to throw some
serious effort behind it. After hearing the TED talk regarding words getting
into the dictionary and becoming 'real', I realized that there needed to be a
dedicated application to facilitate this idea in order to convince the world
at large that language is exactly what we make it, so lets MAKE it.

    This week was spent planning out the project, including writing out a solid
concept of what I want the application to do, along with a few ideas on how I
wanted to achieve it. This quickly led to a more outlined, conceptual
approach to the project, such as setting up a framework for the pages the
site will require along with the major 'classes' or functionality modules
which each will implement. The project should include two databases, one for
users and one for entry objects, and I laid out the elements that I
perceive each of these objects/ databases using. In short, I wanted to have
a lego-manual for the project: it shows all the pieces that are needed,
and how they will go together, leaving only the actual piecing together of
the individual elements. And lots of code :)


Week 4: Class and JSP Creation/ Framework Re-work

    Of course upon actually trying to put these ideas into a physical digital
entity, other issues/needs for the project became apparent. Through out the
week I added classes to the project to get something to work from, hoping to
go from there once a had a basic infrastructure. I drew lots of comparisons
to projects from past java classes and in fact a good bit of code from them
as well. As different facets of the project became apparent, and specific
functionality of other aspects came to light, my original framework has
become a running blueprint for the pages, classes and objects to be
implemented into the project.

    I was able to test out some basic aspects of the program by hardcoding a few
'src.login.User.User' and 'Entry' objects and putting them into arrays, though these objects
will be eventually be read from two database or stored in an xml file.
Still, being able to see the output of each type, even in terminal, is
refreshing amidst the frantics of this course so far. I'd like to be able to
dedicate all of my time to this project, but there are many other things to
learn at the same time! The plan for the next few days is to set up the
user interface, that is the webpages that the user will access the
application through. I have most of the JSPs created in their basic form,
but next I'd to add the page and form elements that will serve to take in
user input, and hopefully get a form to take information in and spit it
back out to the page, without worrying about the database that will
eventually be in between. I'm anxious and excited!


Week 5: src.login.User.User Logon/ Data Objects/ Stylesheets and Navigation/ JDBC Setup

The biggest success this past week was definitely the login functionality,
even if it is only using hard-coded users at this point. The ability to limit
access to certain pages based on the web.xml file and the tomcat config
files gives this fledgling application a much more professional feel, and
I'm really excited to be able to connect a database to this to read in/
allow registered users to the site, as well as allowing new users to join
this database using some of the functionality from the employee project from
advanced java. Currently, the JDBC implementation is still in the works and
I'm having difficulty working out which pieces need to go where/ accessing
mysql, but once this piece is implemented, not only will it make up a large
portion of the app on it's own, but the how-to will lead into the adding/
posting of entry objects to the database as well.

Creating these entry objects now is done through the submit.jsp and a form
servlet which should output the item directly to this page, though eventually
it will simply get added to the database, all of which is displayed on lists.jsp.

Major changes to the app also include the addition of stylesheets and
formatting for each page, including the login and login failed pages which
give insight into who's logged in and how to resolve it. All links route
appropriately apart from the 'Voted' and 'Submitted' links on account.jsp, as
 these both pull in either entry objects or the ids thereof for each user,
 all of which rely on the databases.

Major initiatives for the future are to add comments and testing classes to all
substantial methods and to sortByer out this JDBC nonsense. I'm not sure where
the confusion lies, but logging into mysql is pulling teeth, which prevents
me even from building out the databases in spite of the fact that the code to
implement them hasn't been added yet. Once both the user and entry databases
are functional, tests will be done to ensure authentication is possible and
that users/ entries can be added. At this point, logic will be needed to
grab all relevant account information from the database for a particular
user's account.jsp, as well as to sortByer and display lists based on certain
attributes. To simplify:
        1. Connect to mysql
        2. Connect JDBC to classes
        3. Test additions/ authentication
        4. Display database object information


Week 6:

Semester is really chugging along. Alongside the rest of the class projects,
extracurriculars, and other life happenings, keeping this journal up is easily
missed, but it is helpful, and so I'll try to backtrack and check back in:

This weeks advances are most notably implementation of multiple new jsps and
working out functionalities that do not include the entry lists or user
databases, as I have not managed to work out that connection yet. Jsps set up
to display submissions, log out, individual entry details page and over lists
page. Failed/successful logins route successfully. Dynamic html links based on
whether the user is a guest or logged in. Added properties file to reference for
database connection and other constants. Added javascript that shows the passing
of information from the submission form by posting it to the page on submit.
This is only a model as eventually all submissions will just be passed to the
database, all of which is displayed on lists.jsp. Created a unique local mysql
user that has access to all tables, so I have access to that now, though i
haven't yet finagled managing the database from the app side.

1. Connect JDBC to classes
2. Add tests/ authentication
3. Display database entries on lists.jsp


Week 7:

Further detail-oriented styling and cleanup of code already laid down, as well
as references to the employee-add code from Advanced java, and modeling some
code functionality after those pages, namely employeeAdd (SubmitEntry), and
display pages. Added a jsp and stylesheet for a login splash page to circumvent
a login routing issue that came up as a result of the j_security login page
linking to itself from the home page. Added methods and connections per the
advanced java employee program to the lists class, namely adding a sort option
will run different queries on the database based on which option is chosen and
return that sorted list to the page for display. I still haven't managed to
determine where the disconnect lies with connecting to my database, which again,
will open up many more doors as far as the actual display and formatting of the
database information within the application, but this can only be addressed once
the connection is made. Barring this, I created an initialInserts.sql document
to house all of the default entries into the database (words I created), as test
data, and was able to add all these to te database successfully as well. That
is, I now have a template to use for adding future submissions to the database,
I have a database which does contain information that could be used for testing
out display on the application itself, but my application is not connected to
said database quite yet. This is again the most pressing goal for the coming
weeks:

1. JDBC Connection
2. Testing


Week 8:

This week saw a lull in productivity on this product for 2 main reasons, being
that 1) I spent more time preparing my 2nd extracurricular activity presentation
which will be due and the start of week 11 and 2) the JDBC connection which will
post output to my page and give me more work to do is continuing to elude me,
much to my displeasure, to say the least. After scouring stackOverflow and other
nooks of the internet for issues relating to the 'Connection Refused' error that
has come to be little more than a snarky little reminder of how much time I've
lost by not having this connection in place, I feel as though I've quite
literally exhausted myself and every file configuration that could have anything
to do with this connection, to no avail still. Barring this, there is little
that I can really progress on besides from minor formatting, as this database
connection is the basis for all the output I'll need to format and add logic to,
as well as the login mechanism for the user database. Until this is resolved,
I've found it a better use of my time to take a break from staring at xml files
and carry on with the secondary project.

Minor Changes to the program include changes to Tomcat's server.xml, content.xml
and web.xml, changes to my own web.xml, adjustments to Realm setup and other
servlet configurations, minor stylesheet formatting, and additions/deletions/
enhancements to the database directly, just so that we're ready when the time
comes...

1. JDBC Connection
2. Logging/Testing


Week 9:

As was hinted at in the commit which contain the change, and as will be only
hinted at here in an attempt to keep from losing myself to either rage or
relief, the culprit keeping me from a connection was uncovered this week. Met by
both laughter and tears, the error was in a single character of the port of the
attempted connection, +1 from what it had been all along. Once the change was
implemented, it was but few syntax errors later that I had output of my full
database being displayed in my app. Oh happy day.

This change in the situation sparked a fervency to make up for the last 3 weeks
worth of lost development time, for now that the connection had been made and I
have output, I can set to tweaking and logging the connection process itself,
updating data calls to their respective servlets, formatting the called data on
display, implementing the data into other pages, and this connection will lead
right into the login functionality and modifying it so that users are pulled
from the database rather than tomcat-users.xml. After this week, login works,
lists are displayed in full on pageload, list results can be sorted by type in
the dropdown menu, entries can be submitted to the database and are displayed in
turn on lists.jsp, and major changes were made to stylesheets after finally
seeing what the pages looked like with output :P

1. JDBC Login connection
2. Logging/Testing
3. Vote Mechanism


Week 10:
